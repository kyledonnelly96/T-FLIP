<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2022.1 (Build 209U)" ts="2022-11-30 16:04:46">
<Class name="FLIP.Classes.Document">
<Super>Ens.Request</Super>
<TimeChanged>66427,70161.5815973</TimeChanged>
<TimeCreated>66358,44203.1635877</TimeCreated>

<Property name="Patient">
<Type>FLIP.Classes.Patient</Type>
</Property>

<Property name="ID">
<Type>%String</Type>
</Property>

<Property name="TypeID">
<Type>%String</Type>
</Property>

<Property name="TypeName">
<Type>%String</Type>
</Property>

<Property name="CategoryID">
<Type>%String</Type>
</Property>

<Property name="CategoryName">
<Type>%String</Type>
</Property>

<Property name="ContentType">
<Type>%String</Type>
</Property>

<Property name="FileExt">
<Type>%String</Type>
</Property>

<Property name="Status">
<Type>%String</Type>
</Property>

<Property name="documentdate">
<Type>%String</Type>
</Property>

<Property name="fileSize">
<Type>%Integer</Type>
</Property>

<Property name="fileName">
<Type>%String</Type>
</Property>

<Property name="TextBlock">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50000"/>
</Property>

<Property name="ContentRef">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>DocumentDefaultData</DefaultData>
<Data name="DocumentDefaultData">
<Subscript>"Document"</Subscript>
<Value name="1">
<Value>Patient</Value>
</Value>
<Value name="2">
<Value>DocumentID</Value>
</Value>
<Value name="3">
<Value>DocumentStatus</Value>
</Value>
<Value name="4">
<Value>DocumentType</Value>
</Value>
<Value name="5">
<Value>DocumentDateTime</Value>
</Value>
<Value name="6">
<Value>TextBlock</Value>
</Value>
<Value name="7">
<Value>FileName</Value>
</Value>
<Value name="8">
<Value>ID</Value>
</Value>
<Value name="9">
<Value>TypeID</Value>
</Value>
<Value name="10">
<Value>TypeName</Value>
</Value>
<Value name="11">
<Value>TypeSystem</Value>
</Value>
<Value name="12">
<Value>CategoryID</Value>
</Value>
<Value name="13">
<Value>CategoryDesc</Value>
</Value>
<Value name="14">
<Value>ContentType</Value>
</Value>
<Value name="15">
<Value>FileExt</Value>
</Value>
<Value name="16">
<Value>Status</Value>
</Value>
<Value name="17">
<Value>obsdttm</Value>
</Value>
<Value name="18">
<Value>ContentRef</Value>
</Value>
<Value name="19">
<Value>Notes</Value>
</Value>
<Value name="20">
<Value>CategoryName</Value>
</Value>
<Value name="21">
<Value>base64</Value>
</Value>
<Value name="22">
<Value>documentdate</Value>
</Value>
<Value name="23">
<Value>fileSize</Value>
</Value>
<Value name="24">
<Value>fileName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.DocumentType">
<Super>%Persistent</Super>
<TimeChanged>66374,61897.4317637</TimeChanged>
<TimeCreated>66357,64358.166207</TimeCreated>

<Property name="Code">
<Type>%String</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Property name="CodingSystem">
<Type>%String</Type>
</Property>

<Property name="CategoryCode">
<Type>%String</Type>
</Property>

<Property name="CategoryDescription">
<Type>%String</Type>
</Property>

<Property name="CategoryCoding">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Classes.DocumentTypeD</DataLocation>
<DefaultData>DocumentTypeDefaultData</DefaultData>
<IdLocation>^FLIP.Classes.DocumentTypeD</IdLocation>
<IndexLocation>^FLIP.Classes.DocumentTypeI</IndexLocation>
<StreamLocation>^FLIP.Classes.DocumentTypeS</StreamLocation>
<ExtentSize>1</ExtentSize>
<Data name="DocumentTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DocumentType</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
<Value name="4">
<Value>Description</Value>
</Value>
<Value name="5">
<Value>CodingSystem</Value>
</Value>
<Value name="6">
<Value>CategoryCode</Value>
</Value>
<Value name="7">
<Value>CategoryDescription</Value>
</Value>
<Value name="8">
<Value>CategoryCoding</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="CategoryCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
</Property>
<Property name="CategoryCoding">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<Property name="CategoryDescription">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>18</AverageFieldSize>
</Property>
<Property name="Code">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<Property name="CodingSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<Property name="Description">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>28</AverageFieldSize>
</Property>
<Property name="DocumentType">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="FLIP.Classes.Images">
<Super>Ens.Request</Super>
<TimeChanged>66423,44180.137981</TimeChanged>
<TimeCreated>66358,43993.9980734</TimeCreated>

<Property name="fillerID">
<Type>%String</Type>
</Property>

<Property name="accessionID">
<Type>%String</Type>
</Property>

<Property name="procedureName">
<Type>%String</Type>
</Property>

<Property name="procedureCode">
<Type>%String</Type>
</Property>

<Property name="modalityCode">
<Type>%String</Type>
</Property>

<Property name="sopclassUID">
<Type>%String</Type>
</Property>

<Property name="seriesUID">
<Type>%String</Type>
</Property>

<Property name="instanceUID">
<Type>%String</Type>
</Property>

<Property name="bodysiteCode">
<Type>%Integer</Type>
</Property>

<Property name="laterality">
<Type>%String</Type>
</Property>

<Property name="peformedBy">
<Type>%String</Type>
</Property>

<Property name="dateOfStudy">
<Type>%String</Type>
</Property>

<Property name="obsdttm">
<Type>%String</Type>
</Property>

<Property name="observationValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Patient">
<Type>FLIP.Classes.Patient</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ImagesDefaultData</DefaultData>
<Data name="ImagesDefaultData">
<Subscript>"Images"</Subscript>
<Value name="1">
<Value>Patient</Value>
</Value>
<Value name="2">
<Value>obsdttm</Value>
</Value>
<Value name="3">
<Value>fillerID</Value>
</Value>
<Value name="4">
<Value>accessionID</Value>
</Value>
<Value name="5">
<Value>serviceID</Value>
</Value>
<Value name="6">
<Value>serviceName</Value>
</Value>
<Value name="7">
<Value>serviceIDType</Value>
</Value>
<Value name="8">
<Value>diagService</Value>
</Value>
<Value name="9">
<Value>diagServiceID</Value>
</Value>
<Value name="10">
<Value>resValue</Value>
</Value>
<Value name="11">
<Value>resStatus</Value>
</Value>
<Value name="12">
<Value>device</Value>
</Value>
<Value name="13">
<Value>recStatus</Value>
</Value>
<Value name="14">
<Value>recUpdated</Value>
</Value>
<Value name="15">
<Value>recInserted</Value>
</Value>
<Value name="16">
<Value>procedureName</Value>
</Value>
<Value name="17">
<Value>procedureCode</Value>
</Value>
<Value name="18">
<Value>modalityName</Value>
</Value>
<Value name="19">
<Value>modalityCode</Value>
</Value>
<Value name="20">
<Value>peformedBy</Value>
</Value>
<Value name="21">
<Value>dateOfStudy</Value>
</Value>
<Value name="22">
<Value>sopclassUID</Value>
</Value>
<Value name="23">
<Value>sopclassName</Value>
</Value>
<Value name="24">
<Value>observationValue</Value>
</Value>
<Value name="25">
<Value>bodysiteCode</Value>
</Value>
<Value name="26">
<Value>bodySiteName</Value>
</Value>
<Value name="27">
<Value>laterality</Value>
</Value>
<Value name="28">
<Value>seriesUID</Value>
</Value>
<Value name="29">
<Value>instanceUID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.Patient">
<Super>Ens.Request</Super>
<TimeChanged>66417,51249.4300369</TimeChanged>
<TimeCreated>66354,36870.3901208</TimeCreated>

<Property name="mrn">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="nhs">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="postCode">
<Type>%String</Type>
</Property>

<Property name="dob">
<Type>%String</Type>
</Property>

<Property name="sex">
<Type>%String</Type>
</Property>

<Property name="dod">
<Type>%String</Type>
</Property>

<Property name="ethnicGroup">
<Type>%String</Type>
</Property>

<Property name="nhsTraced">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PatientDefaultData</DefaultData>
<Data name="PatientDefaultData">
<Subscript>"Patient"</Subscript>
<Value name="1">
<Value>mrn</Value>
</Value>
<Value name="2">
<Value>nhs</Value>
</Value>
<Value name="3">
<Value>postCode</Value>
</Value>
<Value name="4">
<Value>patDOB</Value>
</Value>
<Value name="5">
<Value>sex</Value>
</Value>
<Value name="6">
<Value>patDod</Value>
</Value>
<Value name="7">
<Value>ethnicGroup</Value>
</Value>
<Value name="8">
<Value>dob</Value>
</Value>
<Value name="9">
<Value>dod</Value>
</Value>
<Value name="10">
<Value>nhsTraced</Value>
</Value>
<Value name="11">
<Value>nhsOptOut</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.RequestDocumentData">
<Super>Ens.Request</Super>
<TimeChanged>66374,56915.7350012</TimeChanged>
<TimeCreated>66374,39907.5675778</TimeCreated>

<Property name="Query">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10000"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RequestDocumentDataDefaultData</DefaultData>
<Data name="RequestDocumentDataDefaultData">
<Subscript>"RequestDocumentData"</Subscript>
<Value name="1">
<Value>qry</Value>
</Value>
<Value name="2">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.RequestImagingData">
<Super>Ens.Request</Super>
<TimeChanged>66359,31439.9062989</TimeChanged>
<TimeCreated>66359,31438.7431572</TimeCreated>

<Property name="Query">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10000"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RequestImagingDataDefaultData</DefaultData>
<Data name="RequestImagingDataDefaultData">
<Structure>listnode</Structure>
<Subscript>"RequestImagingData"</Subscript>
<Value name="1">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.RequestLastProcessedRowID">
<Super>Ens.Request</Super>
<TimeChanged>66359,31546.7035457</TimeChanged>
<TimeCreated>66359,31546.2551871</TimeCreated>

<Property name="Query">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10000"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RequestLastProcessedRowIDDefaultData</DefaultData>
<Data name="RequestLastProcessedRowIDDefaultData">
<Structure>listnode</Structure>
<Subscript>"RequestLastProcessedRowID"</Subscript>
<Value name="1">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.TokenRequest">
<Super>Ens.Request,%JSON.Adaptor</Super>
<TimeChanged>66340,31835.4920061</TimeChanged>
<TimeCreated>66340,31835.2755006</TimeCreated>

<Property name="AuthFlow">
<Type>%String</Type>
</Property>

<Property name="ClientId">
<Type>%String</Type>
</Property>

<Property name="AuthParameters">
<Type>FLIP.Classes.AuthParameters</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>TokenRequestDefaultData</DefaultData>
<Data name="TokenRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"TokenRequest"</Subscript>
<Value name="1">
<Value>AuthFlow</Value>
</Value>
<Value name="2">
<Value>ClientId</Value>
</Value>
<Value name="3">
<Value>AuthParameters</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.TokenResponse">
<Super>Ens.Response</Super>
<TimeChanged>66340,35043.3066201</TimeChanged>
<TimeCreated>66340,32593.3631576</TimeCreated>

<Property name="AccessToken">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="StatusCode">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>TokenResponseDefaultData</DefaultData>
<Data name="TokenResponseDefaultData">
<Subscript>"TokenResponse"</Subscript>
<Value name="1">
<Value>AccessToken</Value>
</Value>
<Value name="2">
<Value>StatusCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.UpdateRecProcessed">
<Super>Ens.Request</Super>
<TimeChanged>66360,38161.6737682</TimeChanged>
<TimeCreated>66360,34317.6028239</TimeCreated>

<Property name="qry">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>UpdateRecProcessedDefaultData</DefaultData>
<Data name="UpdateRecProcessedDefaultData">
<Subscript>"UpdateRecProcessed"</Subscript>
<Value name="1">
<Value>qry</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Classes.UtilityMethods">
<Super>%RegisteredObject</Super>
<TimeChanged>66443,57736.4542982</TimeChanged>
<TimeCreated>66437,48965.2258687</TimeCreated>

<Method name="DecodeBase64">
<ClassMethod>1</ClassMethod>
<FormalSpec>base64:%Stream.FileBinary,directory:%String,documentID:%String,*fullFilePath:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set directory=directory_"\"_documentID
	

	
	set t=##class(%Library.File).CreateDirectory(directory)
	
	
	set fileStrm=##class(%FileBinaryStream).%New()
	set fullFilePath=directory_"\"_documentID_".pdf"
	set fileStrm.Filename=fullFilePath	
		
	Do base64.Rewind()

	While 'base64.AtEnd {
     set ln = base64.Read()
    set lnDecoded = $system.Encryption.Base64Decode(ln)
	do fileStrm.Write(lnDecoded)
	}
	


	set t=fileStrm.%Save()
	
	

	
		
	quit fullFilePath
]]></Implementation>
</Method>

<Method name="ExtractText">
<ClassMethod>1</ClassMethod>
<FormalSpec>filepath:%String,tikaFilepath:%String,*text:%String</FormalSpec>
<Implementation><![CDATA[
	

	//get directory
	set directory=##class(%File).GetDirectory(filepath)
	//:\Users\Administrator\Kyle\tika-app-2.6.0.jar	
	set cmd="java -jar "_tikaFilepath_" --text -i "_directory_" -o "_directory
	set cmdStatus=$ZF(-1,cmd) //run command

	

	//update filename
	set oldFilePath=filepath_".txt"
	set newFilepath=($REPLACE(filepath,".pdf",".txt")) 
	

	
	set sc=##class(%File).Rename(oldFilePath,newFilepath)
	
	
	set fileObj=##class(%File).%New(newFilepath)
	do fileObj.Open("RU")

	set text=fileObj.Read()
	
	do fileObj.Rewind()
	do fileObj.Close()
	
			
	set t=##class(%File).Delete(filepath)	
	set t=##class(%File).Delete(newFilepath)
	
	
	
	quit text
]]></Implementation>
</Method>
</Class>


<Class name="FLIP.Data.BulkDataProcess">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66380,35593.3656364</TimeChanged>
<TimeCreated>66380,35082.1557449</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pInput:Ens.Request,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	
	set qry=##class(FLIP.Data.InsertQuery).BulkInsert(100,.qry)
	
	$$$LOGINFO(qry)
	
	set stringContainer=##class(Ens.StringContainer).%New()
	set stringContainer.StringValue=qry
	
	set t=..SendRequestSync("BulkDataOp",stringContainer)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Data.BulkInsert">
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66402,32914.7254224</TimeChanged>
<TimeCreated>66380,34061.9600392</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pInput:Ens.Request,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK
	
	set t=..BulkInsert(100,.qry)
	
	$$$LOGINFO(qry)
	
	set stringContainer=##class(Ens.StringContainer).%New()
	set stringContainer.StringValue=qry
	
	set t=..SendRequestSync("BulkDataOp",stringContainer)	
	
	
	quit t
]]></Implementation>
</Method>

<Method name="BulkInsert">
<ClassMethod>1</ClassMethod>
<FormalSpec>NewRecords:%Integer,*Qry:%String</FormalSpec>
<Implementation><![CDATA[
	set start=0
	set end=NewRecords
	
	set Qry="INSERT INTO tflip.imaging_results"
	set Qry=Qry_"(pat_mrn, pat_nhs, pat_name, pat_dob, pat_sex, pat_postcode, pat_ethnicgroup, pat_nhstracest, pat_nhsoptoutst, ires_obsdttm, ires_fillerid, ires_accessionid, ires_service_id, ires_service_name, ires_service_idtype, ires_diagserviceid, ires_diagservice, ires_value, ires_status,rec_process) VALUES "
	
	while start < end
	{
		set start=start+1
	zw start
		if start>1
		{
			set seperator=","
		}
		else
		{
			set seperator=""
		}
		
		
		set accessionNmb="ACCN-"_##class(%PopulateUtils).Random(1000)
		set fillerNumber="FILL-"_##class(%PopulateUtils).Random(1000)
		
		set id=##class(%PopulateUtils).Integer(98,127)
		
		zw id
		
		set numb=##class(%PopulateUtils).Integer(0,1)
		set nhsTrace=$CASE(numb,0:"01",1:"02")

		
	&SQL(SELECT lastName,nhsNumb,mrn,sex,postCode,dob,ethnicCategory into:lastName,:nhs,:mrn,:sex,:postCode,:dob,:ethnicCategory
			FROM FLIP_Data.Patients WHERE ID=:id)
			
		set status=$CASE(numb,0:"F",1:"A")	
		
		set Qry=Qry_seperator_"("_"'"_mrn_"',"_nhs_",'"_$ZCONVERT(lastName,"U")_"','"_dob_"','"_sex_"','"_postCode_"','"_ethnicCategory_"','"_nhsTrace_"',TRUE,'2022-08-"_##class(%PopulateUtils).Integer(20,30)_" 00:00:00','"_fillerNumber_"','"_accessionNmb_"','CT','CT SCAN','SNOMED','333','CAT SCAN','RESULTED-NORMAL','"_status_"','0')"
	zw Qry
	}
	quit Qry
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Data.BulkInsertOp">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66380,34287.3144849</TimeChanged>
<TimeCreated>66380,34287.3144849</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="UpdateData">
<FormalSpec>pRequest:Ens.StringContainer,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
		Set sc = $$$OK
	Try {
		
		Set SQL = pRequest.StringValue
	
		Set sc = ..Adapter.ExecuteUpdate(.pResponse, SQL) 
		

	}
	Catch Ex {
		Set sc = Ex.AsStatus()
	}
	
	quit sc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="Ens.StringContainer">
    <Method>UpdateData</Method>
  </MapItem>
  </MapItems>
]]></Data>
</XData>
</Class>


<Class name="FLIP.Data.InvokeBulkInsert">
<Super>Ens.BusinessService</Super>
<TimeChanged>66380,35844.2503714</TimeChanged>
<TimeCreated>66380,35844.2503714</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	set qry=##class(FLIP.Data.InsertQuery).BulkInsert(100)
	
	$$$LOGINFO(qry)
	
	set stringContainer=##class(Ens.StringContainer).%New()
	set stringContainer.StringValue=qry
	
	set t=..SendRequestSync("BulkDataOp",stringContainer)	
	
	
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="FLIP.Data.Patients">
<Super>%Persistent</Super>
<TimeChanged>66345,55626.2035801</TimeChanged>
<TimeCreated>66345,33705.3989743</TimeCreated>

<Property name="LastName">
<Type>%String</Type>
</Property>

<Property name="nhsNumb">
<Type>%Integer</Type>
</Property>

<Property name="mrn">
<Type>%String</Type>
</Property>

<Property name="sex">
<Type>%String</Type>
</Property>

<Property name="postCode">
<Type>%String</Type>
</Property>

<Property name="dob">
<Type>%String</Type>
</Property>

<Property name="ethnicCategory">
<Type>%Char</Type>
</Property>

<Method name="NewPatients">
<ClassMethod>1</ClassMethod>
<FormalSpec>total:%Integer</FormalSpec>
<Implementation><![CDATA[
	
	
	set start=0 set end=total
	
	while start < end
	{
		set new=##class(FLIP.Data.Patients).%New()
		
		set start=start+1
		set lastNHS=##class(Ens.Util.FunctionSet).Lookup("FLIP.MockDataCreation","lastNHS")
		set lastMRN=##class(Ens.Util.FunctionSet).Lookup("FLIP.MockDataCreation","lastMRN")	
	
		set nhs=lastNHS+1
		set mrn=lastMRN+1
		do ##class(Ens.Util.LookupTable).%UpdateValue("FLIP.MockDataCreation","lastMRN",mrn)
		do ##class(Ens.Util.LookupTable).%UpdateValue("FLIP.MockDataCreation","lastNHS",nhs)
		
		set new.nhsNumb=lastNHS
		set new.mrn=lastMRN
		
		set new.LastName=##class(%PopulateUtils).LastName()
		
	
		
		set sex=$RANDOM(2)
		set new.sex=$CASE(sex,0:"M",1:"F")
		
		set dob=##class(%PopulateUtils).CDate(3,30000,55000)
		set dob=##class(Ens.Util.Time).ConvertDateTime(dob,"%Y-%m-%d","%d-%m-%y")
		set new.dob=dob
		//set date=$ZDATE(integerDate,15)
		//set date=$REPLACE(date,"/","-")
		
		//post code
		set outcode=##class(%PopulateUtils).StringMin(2,2)_##class(%PopulateUtils).Integer(1,40)
		set inCode=$RANDOM(10)_##class(%PopulateUtils).StringMin(2,2)
		set new.postCode=$ZCONVERT(outcode_" "_inCode,"U")
		
		//ethnic category
		
		set x=$RANDOM(9)
		set new.ethnicCategory=$CASE(x,0:"A",1:"B",2:"C",3:"D",4:"E",5:"F",6:"G",7:"H",7:"J",8:"Z")
		
		zw new
		do new.%Save()
		
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Data.PatientsD</DataLocation>
<DefaultData>PatientsDefaultData</DefaultData>
<IdLocation>^FLIP.Data.PatientsD</IdLocation>
<IndexLocation>^FLIP.Data.PatientsI</IndexLocation>
<StreamLocation>^FLIP.Data.PatientsS</StreamLocation>
<ExtentSize>35</ExtentSize>
<Data name="PatientsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LastName</Value>
</Value>
<Value name="3">
<Value>nhsNumb</Value>
</Value>
<Value name="4">
<Value>mrn</Value>
</Value>
<Value name="5">
<Value>sex</Value>
</Value>
<Value name="6">
<Value>postCode</Value>
</Value>
<Value name="7">
<Value>dob</Value>
</Value>
<Value name="8">
<Value>ethnicCategory</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","3","6","9","12","15","17","19","21","23","25","27","29","31","33","35"),$lb(0,0,0,0,1,1,1,0,1,1,1,1,0,1,1),$lb(822083584,822083584,855638016,855638016,905969664,905969664,956301312,956301312,825360384,838860800,889192448,889192448,922746880,922746880,956301312,825819136,842072064,822083584,855638016,855638016,889192448,889192448,922746880,922746880,956301312,842596352,858849280,822083584,855638016,855638016,889192448,859111424))</Histogram>
</Property>
<Property name="LastName">
<Selectivity>2.8571%</Selectivity>
<OutlierSelectivity>.857143:</OutlierSelectivity>
<AverageFieldSize>3.11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," GEOFFRION"," KING"," WIJNSCHENK"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1195724614,1195724614,1263095367,1263095367,1464420942,542591306))</Histogram>
</Property>
<Property name="dob">
<Selectivity>2.8571%</Selectivity>
<AverageFieldSize>12</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 1924-01-17"," 1929-11-15"," 1934-01-03"," 1940-06-07"," 1943-12-28"," 1950-11-24"," 1956-11-26"," 1963-12-04"," 1970-11-17"," 1974-05-29"," 1976-05-05"," 1979-04-21"," 1981-02-27"," 1987-08-14"," 1989-01-16"," 1989-06-21"),$lb(4,3,3,4,3,4,3,3,4,4,4,3,4,4,7),$lb(540096818,875376689,959263025,842607921,859057456,859057456,875572528,808267830,858599730,875769137,892349745,808268081,908931377,892742961,909323569,909323569,925904177,808268081,875376693,875376693,908931125,908931125,959262772,926494000,942746928,825045042,925708344,925708344,959262769,825045302,908931633,540096824))</Histogram>
</Property>
<Property name="ethnicCategory">
<Selectivity>11.1111%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" A"," A"," B"," C"," D"," F"," F"," F"," G"," G"," H"," H"," H"," H"," Z"," Z"),$lb(3,1,1,1,1,3,3,1,3,1,3,3,3,1,3),$lb(541130752,0,0,1090519040,1107296256,1107296256,1124073472,1124073472,1140850688,1140850688,1174405120,0,0,0,0,1174405120,1191182336,0,0,1191182336,1207959552,0,0,0,0,0,0,1207959552,1509949440,0,0,542769152))</Histogram>
</Property>
<Property name="mrn">
<Selectivity>2.8571%</Selectivity>
<OutlierSelectivity>.857143:</OutlierSelectivity>
<AverageFieldSize>2.57</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," 04572345"," 4572347"," 4572349"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,1,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,808727863,808727863,875902770,922746880,956301312,540292407))</Histogram>
</Property>
<Property name="nhsNumb">
<Selectivity>2.8571%</Selectivity>
<OutlierSelectivity>.857143:</OutlierSelectivity>
<AverageFieldSize>2.71</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,13,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000",9991234597,9991234599,9991234601),$lb(21,21,21,21,21,21,21,21,21,21,21,21,0,9,7),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320,960051505,922746880,956301312,892942592,909127936,960051505))</Histogram>
</Property>
<Property name="postCode">
<Selectivity>2.8571%</Selectivity>
<AverageFieldSize>9.83</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" BG18 2KS"," BQ34 5WE"," DT33 2DF"," FH34 6QJ"," GI34 9EN"," HP36 6KK"," IQ3 1AF"," KG1 7TH"," LS4 7ZX"," NM39 4CB"," QE36 3XA"," QR31 9HM"," UY22 4ZK"," VN31 7PB"," WZ33 2BH"," YK25 3DY"),$lb(2,1,1,1,1,1,1,1,1,1,2,1,1,1,1),$lb(541214513,1194407968,1362310176,1112617780,1146368819,1146368819,1179136820,1179136820,1195979572,1195979572,1213215542,1213215542,1230058272,1230058272,1262956832,1262956832,1280521248,1280521248,1313682233,1313682233,1363489590,1160984096,1379086624,1364341553,1431908914,1431908914,1447965489,1447965489,1465529139,1465529139,1498100277,542722866))</Histogram>
</Property>
<Property name="sex">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" F"," F"," F"," F"," F"," F"," F"," M"," M"," M"," M"," M"," M"," M"," M"," M"),$lb(3,3,3,3,3,3,1,3,3,3,3,3,3,3,3),$lb(541458432,0,0,0,0,0,0,0,0,0,0,0,0,1174405120,1291845632,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541917184))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="FLIP.Documents.Process.HistoricDataIngestion">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66443,51526.943636</TimeChanged>
<TimeCreated>66374,56779.3087563</TimeCreated>

<Property name="TempFileConverterFolder">
<Type>%String</Type>
<InitialExpression>"C:\Users\Administrator\Kyle"</InitialExpression>
</Property>

<Property name="TikaFilePath">
<Type>%String</Type>
<InitialExpression>"C:\Users\Administrator\Kyle\tika-app-2.6.0.jar"</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>TempFileConverterFolder,TikaFilePath</Default>
</Parameter>

<Method name="OnRequest">
<FormalSpec>pInput:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	#DIM RS As EnsLib.SQL.Snapshot
	Set RS = pInput
	

	while RS.Next()
	{
		set newRecords=RS.Get("numbRec_toProcess")
	}
		
	set rowsToInsert=##class(Ens.Util.FunctionSet).Lookup("FLIP.Configuration","doc_historic_recordsToSend") 
	$$$TRACE("Minimum rows required: "_rowsToInsert)
	$$$TRACE("Records available: "_newRecords)
	if newRecords<rowsToInsert
	{
		$$$TRACE("Not enough records available")
		quit t
			
	}
	
	//grab next batch
	
	set docReq=##class(FLIP.Classes.RequestDocumentData).%New()
	set qry="SELECT usdoc_rowid, pat_nhs, pat_mrn, pat_name, pat_dob, pat_sex, pat_dod, pat_nhstracest, usdoc_documentdate, usdoc_uniqueid, usdoc_typeid, usdoc_typename, usdoc_categoryid, usdoc_categoryname, usdoc_contenttype, usdoc_contentref, usdoc_fileextn "
	set qry=qry_"FROM tflip.usdoc_metadata WHERE rec_process=FALSE AND pat_nhstracest='01' "
	set qry=qry_"AND NOT (pat_dob='' OR pat_nhs='' OR usdoc_documentdate='' OR usdoc_uniqueid='' OR usdoc_contentref='')"
	set qry=qry_"ORDER BY usdoc_rowid  ASC LIMIT "_rowsToInsert
	set docReq.Query=qry
	
	set sc=..SendRequestSync("ExecuteQuery",docReq,.docRes)
	IF $$$ISERR(sc) $$$ThrowStatus(sc)
	#DIM docRes As EnsLib.SQL.Snapshot
	
	if docRes.RowCount>0
	{
		SET count=0
		
		while docRes.Next()
		{
			set send=1
			
			set doc=##class(FLIP.Classes.Document).%New()
			set pat=##class(FLIP.Classes.Patient).%New()
			set pat.nhs=docRes.Get("pat_nhs")
	
			set pat.sex=docRes.Get("pat_sex")
			
			set pat.dob=docRes.Get("pat_dob")
			if docRes.Get("pat_dod")'="" set pat.dod=docRes.Get("pat_dod")
			set pat.nhsTraced=docRes.Get("pat_nhstracest")
		
			
			set doc.Patient=pat
			
			set doc.ID=docRes.Get("usdoc_uniqueid")
			set doc.TypeID=docRes.Get("usdoc_typeid")
			set doc.TypeName=docRes.Get("usdoc_typename")
			set doc.CategoryID=docRes.Get("usdoc_categoryid")
			set doc.CategoryName=docRes.Get("usdoc_categoryname")
			set doc.ContentType=docRes.Get("usdoc_contenttype")
			set doc.FileExt=docRes.Get("usdoc_fileextn")
			set doc.documentdate=docRes.Get("usdoc_documentdate")
			
			//check if the document is base64 encoded or reference pointed
			IF docRes.Get("usdoc_contenttype")="ED" //If it is a encrypted document
			{
				set stream=##class(%Stream.GlobalBinary).%New()
				do stream.Write(docRes.Get("usdoc_contentref"))
				set directory=..TempFileConverterFolder
				$$$LOGINFO(directory)
				set filePath=##class(FLIP.Classes.UtilityMethods).DecodeBase64(stream,directory,doc.ID)
		
			
			}
			ELSEIF docRes.Get("usdoc_contenttype")="RP" //it is a referenced pointed document
			{
				set filePath=docRes.Get("usdoc_contentref")
			}
			else
			{
				GOTO END
			}	
		

			
			//file size 
			set fileSize=##class(%File).GetFileSize(filePath)
			set doc.fileSize=fileSize
			set doc.fileName=##class(%File).GetFilename(filePath)
			set tikaFilepath=..TikaFilePath
			
			set doc.TextBlock=##class(FLIP.Classes.UtilityMethods).ExtractText(filePath,tikaFilepath)
			
			
			//grab first and last row id's to update table later
			if count=0 set startID=docRes.Get("usdoc_rowid")
			set count=count+1
			set endID=docRes.Get("usdoc_rowid")
			
			
		

			set t=..SendRequestSync("FHIRProcessor",doc)
			
			

			IF $$$ISERR(t) $$$ThrowStatus(t)
		
		
			}
		
		IF '$$$ISERR(t)
		{
			//Update records as processed
			set req=##class(FLIP.Classes.UpdateRecProcessed).%New()
			set sqlSt="UPDATE tflip.usdoc_metadata SET rec_process='TRUE' WHERE usdoc_rowid >= "_startID_" AND usdoc_rowid <="_endID
			set req.qry=sqlSt
			set sc=..SendRequestSync("ExecuteQuery",req)
			
				
			
		}	
	}		
	
		
	
END	
	q t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>HistoricDataIngestionDefaultData</DefaultData>
<Data name="HistoricDataIngestionDefaultData">
<Subscript>"HistoricDataIngestion"</Subscript>
<Value name="1">
<Value>TempFileConverterFolder</Value>
</Value>
<Value name="2">
<Value>TikaFilePath</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Documents.Process.MDMProcessor">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66443,57736.672548</TimeChanged>
<TimeCreated>66358,51841.9136716</TimeCreated>

<Property name="TempFileConverterFolder">
<Type>%String</Type>
<InitialExpression>"C:\Users\Administrator\Kyle"</InitialExpression>
</Property>

<Property name="TikaFilePath">
<Type>%String</Type>
<InitialExpression>":\Users\Administrator\Kyle\tika-app-2.6.0.jar"</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>TempFileConverterFolder,TikaFilePath</Default>
</Parameter>

<Method name="OnRequest">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK
	
	set msg=pRequest
	
				
		//Grab demographics from PID segment
	//Loop through PID 3 to grab mrn and nhs
	set mrn="" set nhs="" set dod=""
		
	set x=msg.FindSegmentValues("PID:3(*)")
	for i=1:1:x
		{
			if msg.FindSegmentValues("PID:3("_i_").5")="NHS"
			{
				set nhs=msg.FindSegmentValues("PID:3("_i_").1")
					
			}
			
		}
		
	set sex=msg.FindSegmentValues("PID:8")
	set dob=msg.FindSegmentValues("PID:7.1")
	
		
	//IF death indicator =Y we need to grab DOD
		
		if msg.FindSegmentValues("PID:30")="Y"
		{
			set dod=msg.FindSegmentValues("PID:29")
		}	
	
		

	
	set document =##class(FLIP.Classes.Document).%New()
	
	set patient=##class(FLIP.Classes.Patient).%New()
	IF nhs'="" set patient.nhs=nhs
	set patient.dob=dob
	IF dod'="" set patient.dob=dod
	set patient.sex=sex
	set document.Patient=patient
	
	set document.ID=msg.FindSegmentValues("TXA:12")
	set document.Status=msg.FindSegmentValues("TXA:17")
	set document.TypeID=msg.FindSegmentValues("TXA:2.1")
	
	if msg.FindSegmentValues("TXA:2.2")'="" set document.TypeName=msg.FindSegmentValues("TXA:2.2")
	
	
	if msg.FindSegmentValues("TXA:2.3")'="" set document.CategoryID=msg.FindSegmentValues("TXA:2.3")
		if msg.FindSegmentValues("TXA:2.4")'="" set document.CategoryName=msg.FindSegmentValues("TXA:2.4")
	
	set document.documentdate=msg.FindSegmentValues("TXA:4.1")
	
	//Set document.ContentRef=msg.FindSegmentValues("TXA:16")
	
	$$$LOGINFO(document.ID)
		$$$LOGINFO(document.documentdate)
			$$$LOGINFO(patient.dob)
				$$$LOGINFO(patient.nhs)
	
	IF (document.ID="") || (document.documentdate="")  || (patient.dob="")
	 || (patient.nhs="")
	{
		$$$LOGERROR("Missing values from message - Discarding")
		quit t
		
	}	
	
	
	//check if the document is base64 encoded or reference pointed
	IF msg.FindSegmentValues("OBX(1):2")="ED" //If it is a encrypted document
	{
		
		
		set stream=##class(%Stream.GlobalBinary).%New()
		do stream.Write(msg.GetValueAt("OBX(1):5(1).5"))
		set directory=..TempFileConverterFolder
		$$$LOGINFO(directory)
		set filePath=##class(FLIP.Classes.UtilityMethods).DecodeBase64(stream,directory,document.ID)
		
			
		
	}
	ELSEIF msg.FindSegmentValues("OBX(1):2")="RP" //it is a referenced pointed document
	{
		set filePath=msg.FindSegmentValues("OBX(1):5(1)")
	}
	else
	{
		$$$LOGERROR("Unsupported media type") 
		quit t
		
	}	
	
	$$$LOGINFO(filePath)	
		
	
	set tikaFilepath=..TikaFilePath
			
	set document.TextBlock=##class(FLIP.Classes.UtilityMethods).ExtractText(filePath,tikaFilepath)

	set t=..SendRequestSync("FHIRProcessor",document)
	

	
	
	
	
	quit t
]]></Implementation>
</Method>

<Method name="DecodeBase64">
<FormalSpec>base64:%Stream.GlobalBinary,documentID:%String,*fullFilePath:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set directory="C:\Users\Administrator\Kyle\"_documentID
	
	$$$LOGINFO(base64)
	
	set t=##class(%Library.File).CreateDirectory(directory)
	$$$TRACE("Directory created "_t)
	
	
	set fileStrm=##class(%FileBinaryStream).%New()
	set fullFilePath=directory_"\"_documentID_".pdf"
	set fileStrm.Filename=fullFilePath	
		
	Do base64.Rewind()

	While 'base64.AtEnd {
     set ln = base64.Read()
    set lnDecoded = $system.Encryption.Base64Decode(ln)
	do fileStrm.Write(lnDecoded)
	}
	$$$TRACE(lnDecoded)


	set t=fileStrm.%Save()
	
	

	
		
	quit fullFilePath
]]></Implementation>
</Method>

<Method name="ExtractText">
<FormalSpec>filepath:%String,*text:%String</FormalSpec>
<Implementation><![CDATA[
	
	$$$LOGINFO("FileIN"_filepath)
	//get directory
	set directory=##class(%File).GetDirectory(filepath)
		
	set cmd="java -jar C:\Users\Administrator\Kyle\tika-app-2.6.0.jar --text -i "_directory_" -o "_directory
	set cmdStatus=$ZF(-1,cmd) //run command
	$$$TRACE("Running command: "_cmd)
	$$$TRACE("CMD: "_cmdStatus)
	set t=$SELECT(cmdStatus=0:$$$OK,1:$$$ERROR($$$GeneralError,"Unable to extract text from pdf"))
	$$$TRACE($SYSTEM.Status.GetErrorText(t))
	IF $$$ISERR(t) $$$ThrowStatus(t)
	

	//update filename
	set oldFilePath=filepath_".txt"
	set newFilepath=($REPLACE(filepath,".pdf",".txt")) 
	
	$$$LOGINFO("old"_oldFilePath)
	$$$LOGINFO("new "_newFilepath)
	
	set sc=##class(%File).Rename(oldFilePath,newFilepath)
	

	/*set stream=##class(%Stream.FileCharacter).%New()
	set sc=stream.LinkToFile(newFilepath)
	
	while 'stream.AtEnd
	{ 
		set text=stream.ReadLine()
		
	}*/
	
	set fileObj=##class(%File).%New(newFilepath)
	do fileObj.Open("RU")
	

	set text=fileObj.Read()
	
	do fileObj.Rewind()
	do fileObj.Close()
	
	
	
			
	set t=##class(%File).Delete(filepath)
	$$$TRACE("PDF file deleted: "_t)
		
	set t=##class(%File).Delete(newFilepath)
	
	$$$TRACE(" Txt File deleted: "_t)
		
	set t=##class(%File).RemoveDirectory(directory)
	IF '$$$ISERR(t) $$$TRACE("Temp txt file deleted")
	
	quit text
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>MDMProcessorDefaultData</DefaultData>
<Data name="MDMProcessorDefaultData">
<Subscript>"MDMProcessor"</Subscript>
<Value name="1">
<Value>TempFolder</Value>
</Value>
<Value name="2">
<Value>TempFileConverterFolder</Value>
</Value>
<Value name="3">
<Value>TikaFilePath</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Documents.Service.InvokeHistoricIngestion">
<Super>Ens.BusinessService</Super>
<TimeChanged>66364,36693.1245911</TimeChanged>
<TimeCreated>66364,36454.9172928</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	set t=..SendRequestSync("Doc_ProcessHistoricData",pInput)
	
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="FLIP.Imaging.Process.HistoricDataIngestion">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66443,57731.2809618</TimeChanged>
<TimeCreated>66358,51464.5899026</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	#DIM RS As EnsLib.SQL.Snapshot
	Set RS = pInput
	

	while RS.Next()
	{
		set newRecords=RS.Get("numbRec_toProcess")
	}
		
	set rowsToInsert=##class(Ens.Util.FunctionSet).Lookup("FLIP.Configuration","img_historic_recordsToSend")
	$$$TRACE("Minimum rows required: "_rowsToInsert)
	$$$TRACE("Records available: "_newRecords)
	if newRecords<rowsToInsert
	{
		$$$TRACE("Not enough records available")
		quit t
			
	}	

		
		
	//Grab next batch
	set imgReq=##class(FLIP.Classes.RequestImagingData).%New()
	set qry="SELECT imgres_rowid, pat_nhs, pat_mrn, pat_sex, pat_name, pat_dob, pat_dod, pat_nhstracest, ires_fillerid, ires_accessionid, ires_procedurecode, ires_procedurename, ires_modality, ires_performedby, ires_bodysite, ires_laterality, ires_sopclassid, ires_seriesid, ires_instanceid,ires_dateofstudy, ires_obsdttm, ires_obsvalue "
	set qry=qry_"FROM tflip.imaging_results WHERE rec_process='0' AND pat_nhstracest='01' "
	set qry=qry_"AND NOT (pat_nhs='' OR ires_accessionid='' OR ires_procedurecode='' OR ires_procedurename='' OR ires_modality='' OR ires_dateofstudy='')"
	set qry=qry_"ORDER BY imgres_rowid ASC LIMIT "_rowsToInsert
	$$$LOGINFO(qry)
	set imgReq.Query=qry

	set sc=..SendRequestSync("ExecuteQuery",imgReq,.imgRes)
	IF $$$ISERR(sc) $$$ThrowStatus(sc)
	#DIM imgRes As EnsLib.SQL.GatewayResultSet
	

	if imgRes.RowCount>0
	{
		set count=0
		
		while imgRes.Next()
		
		{
			set img=##class(FLIP.Classes.Images).%New()
			set pat=##class(FLIP.Classes.Patient).%New()
			

			
			set pat.nhs=imgRes.Get("pat_nhs")
			set pat.sex=imgRes.Get("pat_sex")
			set pat.dob=imgRes.Get("pat_dob")
			IF imgRes.Get("pat_dod")'="" set pat.dod=imgRes.Get("pat_dod")
	
			set img.Patient=pat
			
			set img.observationValue=imgRes.Get("ires_obsdttm")
			set img.fillerID=imgRes.Get("ires_fillerid")
			set img.accessionID=imgRes.Get("ires_accessionid")
			set img.procedureCode=imgRes.Get("ires_procedurecode")
			set img.procedureName=imgRes.Get("ires_procedurename")
			set img.modalityCode=imgRes.Get("ires_modality")
			set img.laterality=imgRes.Get("ires_laterality")
			set img.bodysiteCode=imgRes.Get("ires_bodysite")
			set img.sopclassUID=imgRes.Get("ires_sopclassid")
			set img.seriesUID=imgRes.Get("ires_seriesid")
			set img.instanceUID=imgRes.Get("ires_instanceid")
			set img.peformedBy=imgRes.Get("ires_performedby")

			IF imgRes.Get("ires_obsvalue")'="" set img.observationValue=imgRes.Get("ires_obsvalue")
			if imgRes.Get("ires_dateofstudy")'="" set img.dateOfStudy=imgRes.Get("ires_dateofstudy")_"0000"
			if imgRes.Get("ires_obsdttm")'="" set img.obsdttm=imgRes.Get("ires_obsdttm")
		
			
			if count=0 set startID=imgRes.Get("imgres_rowid")
			set count=count+1
			set endID=imgRes.Get("imgres_rowid")
			
			
				
			set sc=..SendRequestSync("FHIRProcessor",img,.sc)
					
		
		}
		
		IF '$$$ISERR(sc)
		{
			//Update records as processed
			set req=##class(FLIP.Classes.UpdateRecProcessed).%New()
			set sqlSt="UPDATE tflip.imaging_results SET rec_process='TRUE' WHERE imgres_rowid >= "_startID_" AND imgres_rowid <="_endID
			set req.qry=sqlSt
			set sc=..SendRequestSync("ExecuteQuery",req)
		
			
		}	
		
	}
	else
	{
		$$$TRACE("Missing data in available rows")
	
		
	}	
	
END	
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Imaging.Process.RealtimeDataIngestion">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66434,48993.5814812</TimeChanged>
<TimeCreated>66346,45791.9986216</TimeCreated>

<Method name="OnRequest">
<FormalSpec>msg:EnsLib.HL7.Message,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK


	
	//Grab demographics from PID segment
	//Loop through PID 3 to grab mrn and nhs	
	set mrn="" set nhs="" set dod="" set nhsTrace=""
	
	set x=msg.FindSegmentValues("PID:3(*)")
	for i=1:1:x
		{
			if (msg.FindSegmentValues("PID:3("_i_").5")="NHS") || (msg.FindSegmentValues("PID:3("_i_").5")="NH")
			{
				set nhs=msg.FindSegmentValues("PID:3("_i_").1")
					
			}
			
		}
	//Check trace status
	
	$$$LOGINFO(nhs)
	
	set nhsTrace=msg.FindSegmentValues("PID:32")
	if (nhsTrace'="01") || (nhs="")
	{
		$$$TRACE("NHS NUMBER NOT TRACED - DISCARDING MESSAGE")
		quit t
		
	}	
	
	
	set img=##class(FLIP.Classes.Images).%New()
	set pat=##class(FLIP.Classes.Patient).%New()
	
	
		
	set sex=msg.FindSegmentValues("PID:8")
	set dob=msg.FindSegmentValues("PID:7.1")
	
	//IF death indicator =Y we need to grab DOD
		
		if msg.FindSegmentValues("PID:30")="Y"
		{
			set dod=msg.FindSegmentValues("PID:29")
	
		}
		
	if msg.FindSegmentValues("OBR:4.1")'="" 
	{
		set img.procedureCode= msg.FindSegmentValues("OBR:4.1")
	}

	if msg.FindSegmentValues("OBR:4.2")'="" 
	{
		set img.procedureName=msg.FindSegmentValues("OBR:4.2")
	} 

	SET fillerID=msg.FindSegmentValues("ORC:3.1")
	
	//BODY SITE and Laterality
	set bodySiteCode="" set laterality="" set bodysiteName =""
	
	set bodySiteCode=msg.FindSegmentValues("OBR:15.4")
	
	set laterality=msg.FindSegmentValues("OBR:15.5")
	
	
	if msg.FindSegmentValues("OBR:20.1")'="" 
	{
		set img.accessionID=msg.FindSegmentValues("OBR:20.1")
		
	} 

	
	if msg.FindSegmentValues("OBR:24.1")'="" 
	{
		set img.modalityCode=msg.FindSegmentValues("OBR:24.1")
	}
	
	set obsValue=msg.FindSegmentValues("OBX:5.1")
		
	set obsDttm=msg.FindSegmentValues("OBX:14.1")  
	
	set observer=msg.FindSegmentValues("OBR:32.1")  
	
	if msg.FindSegmentValues("OBR:7.1")'="" 
	{
		set img.dateOfStudy=msg.FindSegmentValues("OBR:7.1")
	}	
	
	//DICOM ID's 
	set seriesUID="" set instanceUID="" set sopclassUID=""
	set seriesUID=msg.FindSegmentValues("ZDI:1")	
	set instanceUID=msg.FindSegmentValues("ZDI:2")
	set sopclassUID=msg.FindSegmentValues("ZDI:3")		
	if obsValue'="" set img.observationValue=obsValue
	if obsDttm'="" set img.obsdttm=obsDttm
	set img.fillerID=fillerID
	if laterality'="" set img.laterality=laterality
	if bodySiteCode'="" set img.bodysiteCode=bodySiteCode
	if observer'="" set img.peformedBy=observer
	if seriesUID'="" set img.seriesUID=seriesUID
	if instanceUID'="" set img.instanceUID=instanceUID
 	if sopclassUID'="" set img.sopclassUID=sopclassUID
	
	set pat.nhs=nhs 
	set pat.sex=sex
	set pat.dob=dob 
	if dod'="" set pat.dod=dod
	
	set img.Patient=pat


	
	IF (img.accessionID'="") && (img.dateOfStudy'="") && (img.modalityCode'="") && (img.procedureCode'="")
	&& (img.procedureName'="") && (pat.dob'="") && (pat.nhs'="")
	{
	
		set t=..SendRequestSync("FHIRProcessor",img)
	}
	else
	{
		$$$TRACE("Missing values from message")
		$$$TRACE("Discarding message")
		
	}	
		
		
	
	
	
	q t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Imaging.Service.InvokeHistoricIngestion">
<Super>Ens.BusinessService</Super>
<TimeChanged>66358,50031.2187812</TimeChanged>
<TimeCreated>66358,50031.2187812</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK
	
	set t=..SendRequestSync("Img_ProcessHistoricData",pInput)
	
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="FLIP.Imaging.Service.MDMIn">
<Super>Ens.BusinessService</Super>
<TimeChanged>66379,49125.7051986</TimeChanged>
<TimeCreated>66352,45920.7775707</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	set string=pInput.Get("hl7")
	
	
	set hl7=##class(EnsLib.HL7.Message).ImportFromString(string,.t)
	set t=hl7.PokeDocType("2.3:ORU_R01")
	
	
	set t=..SendRequestSync("Img_ProcessORU",hl7)	
	
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="FLIP.Operation.ExecuteQuery">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66374,56865.6649041</TimeChanged>
<TimeCreated>66343,45211.9018476</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SelectData">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
	Set sc = $$$OK
	Try {
		Set pResponse = ##class(EnsLib.SQL.Snapshot).%New()
		Set SQL = pRequest.Query
	
		Set sc = ..Adapter.ExecuteQuery(.pResponse, SQL) 
		

	}
	Catch Ex {
		Set sc = Ex.AsStatus()
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="UpdateData">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
		Set sc = $$$OK
	Try {
		Set pResponse = ##class(EnsLib.SQL.Snapshot).%New()
		Set SQL = pRequest.qry
	
		Set sc = ..Adapter.ExecuteUpdate(.pResponse, SQL) 
		

	}
	Catch Ex {
		Set sc = Ex.AsStatus()
	}
	
	quit sc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="FLIP.Classes.RequestLastProcessedRowID">
    <Method>SelectData</Method>
  </MapItem>
    <MapItem MessageType="FLIP.Classes.RequestImagingData">
    <Method>SelectData</Method>
  </MapItem>
   <MapItem MessageType="FLIP.Classes.UpdateRecProcessed">
    <Method>UpdateData</Method>
  </MapItem>
    <MapItem MessageType="FLIP.Classes.RequestDocumentData">
    <Method>SelectData</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="FLIP.Operation.SendToFLIP">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66443,57736.9658351</TimeChanged>
<TimeCreated>66385,42249.7237591</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="FLIPAuthorisation">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Default>FLIPAuthorisation</Default>
</Parameter>

<Method name="GetToken">
<FormalSpec>pmsgIn:FLIP.Classes.TokenRequest,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	SET ts=$$$OK	
	SET ..Adapter.URL="https://cognito-idp.eu-west-2.amazonaws.com/"
	set strm=##class(%Stream.GlobalCharacter).%New()
	do ##class(Ens.Util.JSON).ObjectToJSONStream(pmsgIn,.strm)
	SET tHTTPReq=##class(%Net.HttpRequest).%New()	
	DO tHTTPReq.SetHeader("x-amz-target","AWSCognitoIdentityProviderService.InitiateAuth")
	DO tHTTPReq.SetHeader("Content-Type","application/x-amz-json-1.1")
	SET tHTTPReq.EntityBody=strm	
	
	SET ts=..Adapter.SendFormDataArray(.tHttpResponse, "POST", tHTTPReq)
	
	
	$$$TRACE(tHttpResponse)

	#DIM tHttpResponse as %Net.HttpResponse
	
	IF $ISOBJECT(tHttpResponse)
	{
	
		IF tHttpResponse.StatusCode="200"
		{
			
		
		
		set obj={}.%FromJSON(tHttpResponse.Data)
		set token=obj.AuthenticationResult.IdToken
		
		set tokenResponse=##class(FLIP.Classes.TokenResponse).%New()
		set tokenResponse.AccessToken=token
		set tokenResponse.StatusCode=tHttpResponse.StatusCode
		set pResponse=tokenResponse
		
		//ADD ACCESS TOKEN TO GLOBAL
		set ^tokenTS=$PIECE($HOROLOG,",",1)_$PIECE($HOROLOG,",",2)
		set ^token=token
		}
		
	}	
	

	
	


	quit ts
]]></Implementation>
</Method>

<Method name="SendFHIR">
<FormalSpec>pMsgIn:Ens.StreamContainer,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
	set sc=$$$OK
	
	set strm=pMsgIn.Stream
	
	/*set strm=##class(%Stream.GlobalCharacter).%New()
	do ##class(Ens.Util.JSON).ObjectToJSONStream(pMsgIn.JSONString,.strm)*/
	
	SET tHTTPReq=##class(%Net.HttpRequest).%New()	
	
	

	DO tHTTPReq.SetHeader("FLIP_Authorization",..FLIPAuthorisation)
	DO tHTTPReq.SetHeader("Content-Type","application/json")

	SET ..Adapter.URL="http://3.8.170.25:32472/api/import"
	
	SET tHTTPReq.EntityBody=strm	
	
	
	SET ts=..Adapter.SendFormDataArray(.tHttpResponse, "POST", tHTTPReq)
	
	
	#DIM tHttpResponse As %Net.HttpResponse
	//$$$TRACE("Status code: "_tHttpResponse.StatusCode)
	//$$$TRACE(tHttpResponse.Data)

	set pResponse=tHttpResponse.StatusCode
	
	$$$LOGINFO("Status code "_tHttpResponse.StatusCode)
	$$$LOGINFO("Status Line "_tHttpResponse.StatusLine)
	$$$LOGINFO(tHttpResponse.Data.Read())

	
	quit sc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
<MapItem MessageType="FLIP.Classes.TokenRequest">
<Method>GetToken</Method>
</MapItem>
<MapItem MessageType="Ens.StreamContainer">
<Method>SendFHIR</Method>
</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="FLIP.Process.BulkInsertProcess">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66267,62325.9152685</TimeChanged>
<TimeCreated>66267,62325.6990895</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pInput:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	//INSERTS 100 Records when invoked
	
	set Qry=##class(FLIP.Data.InsertQuery).BulkInsert(100,.Qry)
	
	set StringContainer=##class(Ens.StringContainer).%New()
	set StringContainer.StringValue=Qry
	
	set t=..SendRequestSync("ExecuteUpdate",StringContainer)
	
	$$$TRACE(Qry)
	
	q t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Process.FHIRConvertor">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66442,48111.4384244</TimeChanged>
<TimeCreated>66339,58121.8332163</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc =$$$OK 

	IF $CLASSNAME(pRequest)=("FLIP.Classes.Images")
  	{

	  	do ..CreateImagingBundle(pRequest,.fhir)
	  	 	
  	}
  	ELSEIF $CLASSNAME(pRequest)=("FLIP.Classes.Document")
  	{
	  	do ..CreateDocumentBundle(pRequest,.fhir)
	  	
  	} ELSE
  	{
	  	quit sc
  	}
  	
  				
				
	IF sc
	{
		
		$$$TRACE("Sending FHIR to FLIP endpoint")
		//$$$TRACE(fhir.JSONString)
	
		
		set sc=..SendRequestSync("HTTP_SendToFlip",fhir)
					
	}	
		
			
	quit sc
]]></Implementation>
</Method>

<Method name="CreateImagingBundle">
<FormalSpec>obj:FLIP.Classes.Images,*strmc:Ens.StreamContainer</FormalSpec>
<Implementation><![CDATA[
	
	set bundle={}
	set bundle.resourceType="Bundle"
	set bundle.type="collection"
	set bundle.entry=[]
	
	//IMAGING STUDY RESOURCE
	set img={}
	set img.resource={}
	set img.resource.resourceType="ImagingStudy"
	set img.resource.meta={}
	set img.resource.meta.profile="https://aicentre.co.uk/flip/ImagingStudy"
	
	set img.resource.subject={}
	set img.resource.subject.reference="Patient/"_obj.Patient.nhs
	
	set img.resource.status="available"
	set img.resource.started=##class(Ens.Util.Time).ConvertDateTime(obj.dateOfStudy,"%Y%m%d%H%M","%Y-%m-%d")
	
	
	set img.resource.modality={}
	set img.resource.modality.system="urn:oid:1.2.840.10008.6.1.19"
	set modalityCode=obj.modalityCode
	set img.resource.modality.code=modalityCode
	set modalityName=""
		
	&sql(SELECT CodeMeaning into :modalityName FROM FLIP_Tables.Modality WHERE CodeValue =:modalityCode)
	
	if modalityName'=""  set img.resource.modality.display=modalityName
	
	
	set img.resource.modality.display=modalityName
	
	
	
	set img.resource.procedureCode=[]
	set procedureCode={}
	set procedureCode.coding=[]
	set coding={}
	set coding.system="https://aicentre.co.uk/flip/PROCEDURE_CODE"
	set coding.code=obj.procedureCode
	set coding.display=obj.procedureName
	do procedureCode.coding.%Push(coding)
	do img.resource.procedureCode.%Push(procedureCode)
	
	//identifier
	
	//fillerID
	set img.resource.identifier=[]
	set filler={}
	set filler.use="official"
	set filler.type={}
	set filler.type.coding=[]
	set fillerCoding={}
	set fillerCoding.system="https://aicentre.co.uk/flip/PACS-LOCAL"
	set fillerCoding.code="FILLER"
	
	do filler.type.coding.%Push(fillerCoding)
	
	
	set filler.value=obj.fillerID
	
	//accessionID
	set acsn={}
	set acsn.use="official"
	set acsn.type={}
	set acsn.type.coding=[]
	set acsnCoding={}
	set acsnCoding.system="https://aicentre.co.uk/flip/PACS-LOCAL"
	set acsnCoding.code="ACSN"
	
	do acsn.type.coding.%Push(acsnCoding)
	
	set accessionID=obj.accessionID
	
	set acsn.value=accessionID
	
	
	do img.resource.identifier.%Push(filler)
	do img.resource.identifier.%Push(acsn)
	
	
	set img.resource.series=[]

	
	set series={}
	
	$$$LOGINFO(obj.seriesUID)
		$$$LOGINFO($L(obj.seriesUID))
	
	if (obj.seriesUID'="") && ($L(obj.seriesUID)>1)
	{ 	
		set seriesID=obj.seriesUID
	
	}
	else
	{
	//grab series id from local table
	
		set seriesID=""
		&sql(Select SeriesGUID into :seriesID from FLIP_Tables.ImageSeries WHERE AccessionID=:accessionID AND Modality=:modalityCode)
	
		IF seriesID=""
		{
			//create new guid
			set seriesID=$System.Util.CreateGUID()
		
			//insert into local table
			&sql(INSERT INTO FLIP_Tables.ImageSeries (Modality,AccessionID,SeriesGUID) VALUES (:modalityCode,:accessionID,:seriesID))
		}	
	
	}
	
	
	set series.uid=seriesID
	

	
	IF obj.peformedBy'="" && $L(obj.peformedBy)>1
	{
		set series.performer={}
		set series.performer.actor={}
		set series.performer.actor.identifier={}
		set series.performer.actor.identifier.system="https://aicentre.co.uk/flip/PACS-LOCAL"
		set series.performer.actor.identifier.value=obj.peformedBy
	}

		set series.modality={}
		set series.modality.system="urn:oid:1.2.840.10008.6.1.19"
		set series.modality.code=obj.modalityCode
		if modalityName'=""  set series.modality.display=modalityName
		
	set latDisplay="" set latCode=obj.laterality
	
	&sql(SELECT CodeMeaning into:latDisplay FROM FLIP_Tables.Laterality where CodeValue=:latCode)
		
	IF latDisplay'="" 
	{
		set series.laterality={}
		set series.laterality.system="urn:oid:1.2.840.10008.6.1.1284"
		set series.laterality.code=latCode
		set series.laterality.display=latDisplay


	}	
	IF obj.bodysiteCode'="" 
	{
		set bodySiteCode=obj.bodysiteCode
		set series.bodySite={}
		set series.bodySite.system="https://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html"
		set series.bodySite.code=obj.bodysiteCode
	


	}
	
	if (obj.instanceUID'="") && (obj.sopclassUID'="")
	{
	
		set sopclassName="" set sopUID=obj.sopclassUID
		&sql(SELECT CodeMeaning into :sopclassName FROM FLIP_Tables.SopClass WHERE CodeValue =:sopUID)
		IF sopclassName'=""
		{
		set series.instance={}
		set series.instance.uid=obj.instanceUID	
		set series.instance.sopClass={}
		set series.instance.sopClass.display=sopclassName
		set series.instance.sopClass.system="1.2.840.10008.15.0.​3.​14"
		set series.instance.sopClass.code=obj.sopclassUID
		}
		
	
		
		
	}
	else
	{
		$$$TRACE("Empty or invalid values in instance uid or sopclass uid")
		
	}		
	
		do img.resource.series.%Push(series)
	
	
	do bundle.entry.%Push(img)
	
	//PATIENT RESOURCE
	
	set pat={}
	set pat.resource={}
	set pat.resource.resourceType="Patient"
	set pat.resource.identifier=[]
	
	
	if (obj.Patient.nhs'="") 
	{
	
		set identifierNHS={}
		set identifierNHS.use="official"
		set identifierNHS.type={}
		set identifierNHS.type.coding=[]
		set coding={}
		set coding.code="NHS"
		set identifierNHS.value=obj.Patient.nhs
		DO identifierNHS.type.coding.%Push(coding)
		do pat.resource.identifier.%Push(identifierNHS)
	}
	
	set patSex=##class(Ens.Util.FunctionSet).Lookup("FLIP.Gender",obj.Patient.sex,"unknown",3)

	set pat.resource.gender=patSex
	
	set pat.resource.birthDate=##class(Ens.Util.Time).ConvertDateTime(obj.Patient.dob,"%Y%m%d","%Y-%m-%d")
	if obj.Patient.dod'="" set pat.resource.deceasedDateTime=##class(Ens.Util.Time).ConvertDateTime(obj.Patient.dod,"%Y%m%d","%Y-%m-%d")	
	
	/*
	set name={} set name.use="official" set name.text="Not Disclosed" set name.family="Not Disclosed"
	set name.given=["Not Disclosed"] set name.prefix=["Not Disclosed"]
	set pat.resource.name=[]
	do pat.resource.name.%Push(name)
	

	
	
	set address={}
	set pat.resource.address=[]
	set address.use="home"
	set address.type="postal"
	set address.postalCode=obj.Patient.postCode
	DO pat.resource.address.%Push(address)
	
	//add extension for ethnic code
	set pat.resource.extension=[]
	set extension={}
	set extension.url="https://fhir.hl7.org.uk/StructureDefinition/Extension-CareConnect-EthnicCategory-1"
	set extension.valueCodeableConcept={}
	set extension.valueCodeableConcept.coding=[]
	 set coding={} 
	set coding.system="EthnicCategory" set coding.code=##class(Ens.Util.FunctionSet).Lookup("FLIP.Ethnicity",obj.Patient.ethnicGroup,"Z") //return Z (not stated) if no mapping found
	do extension.valueCodeableConcept.coding.%Push(coding)
	do pat.resource.extension.%Push(extension)*/
	
	
	do bundle.entry.%Push(pat)
	


	//OBSERVATION RESOURCE
	
	IF obj.observationValue'=""  && obj.obsdttm'=""
	{
	
	set obs={}
	set obs.resource={}
	set obs.resource.resourceType="Observation"
	set obs.resource.status="final"
	
	set obs.resource.code=[]
	 set code={}
	 set code.coding=[]
	
	
	set coding={}
	set coding.system="https://aicentre.co.uk/flip/PACS-LOCAL"
	set coding.code=obj.procedureCode
	set coding.display=obj.procedureName
	do code.coding.%Push(coding)
	do obs.resource.code.%Push(code)
	
	$$$LOGINFO(obj.dateOfStudy)
	
	set obs.resource.effectiveDateTime=##class(Ens.Util.Time).ConvertDateTime(obj.obsdttm,"%Y%m%d%H%M","%Y-%m-%d")
	set obs.resource.valueString=obj.observationValue
	
	do bundle.entry.%Push(obs)
	
	

	
	
	}
	
	
	

	
	$$$TRACE("TEST"_bundle.%ToJSON())
	/*set fhir=##class(FLIP.Classes.SendFHIR).%New()
	set fhir.JSONString=bundle.%ToJSON()*/
	
	set strmc=##class(Ens.StreamContainer).%New()
	set strm=##class(%Stream.GblChrCompress).%New()
	set jsonFormatter=##class(%JSON.Formatter).%New()
	set json= bundle.%ToJSON()
	do jsonFormatter.FormatToStream(json,.strm)
	
	set strmc.Stream=strm
]]></Implementation>
</Method>

<Method name="CreateDocumentBundle">
<FormalSpec>obj:FLIP.Classes.Document,*strmc:Ens.StreamContainer</FormalSpec>
<Implementation><![CDATA[
		
	
	set bundle={}
	set bundle.resourceType="Bundle"
	set bundle.type="collection"
	set bundle.entry=[]
	
	//PATIENT RESOURCE	
	set pat={}
	set pat.resource={}
	set pat.resource.resourceType="Patient"
	set pat.resource.identifier=[]
	
	
	if (obj.Patient.nhs'="") 
	{
	
		set identifierNHS={}
		set identifierNHS.use="official"
		set identifierNHS.type={}
		set identifierNHS.type.coding=[]
		set coding={}
		set coding.code="NHS"
		set identifierNHS.value=obj.Patient.nhs
		DO identifierNHS.type.coding.%Push(coding)
		do pat.resource.identifier.%Push(identifierNHS)
	}
	
	set patSex=##class(Ens.Util.FunctionSet).Lookup("FLIP.Gender",obj.Patient.sex,"unknown",3)

	set pat.resource.gender=patSex
	
	set pat.resource.birthDate=##class(Ens.Util.Time).ConvertDateTime(obj.Patient.dob,"%Y%m%d","%Y-%m-%d")
	if obj.Patient.dod'="" set pat.resource.deceasedDateTime=##class(Ens.Util.Time).ConvertDateTime(obj.Patient.dod,"%Y%m%d","%Y-%m-%d")	
	
	
	do bundle.entry.%Push(pat)
	
	//Doc Ref resource
	
	set doc={}
	set doc.resource={}
	set doc.resource.resourceType="DocumentReference"
	set doc.resource.id=obj.ID
	set doc.resource.status="current"

	set doc.resource.docStatus="final"
		
	
	set doc.resource.identifier=[]
	
	set identifier={}
	set identifier.use="official"
	set identifier.type={}
	set identifier.type.coding=[]
	set type={}
	set type.code="DRN"
	set type.system="https://aicentre.co.uk/flip/DocMan"
	do identifier.type.coding.%Push(type)
	set identifier.value=obj.ID
	do doc.resource.identifier.%Push(identifier)
	
	
	If (obj.TypeID'="") || (obj.TypeName'="")
	{
	set doc.resource.type={}
	set doc.resource.type.coding=[]
	set codingType={}
	set codingType.system="https://aicentre.co.uk/flip/DocMan"
	IF obj.TypeID'="" set codingType.code=obj.TypeID
	IF obj.TypeName'="" set codingType.display=obj.TypeName
	do doc.resource.type.coding.%Push(codingType)
	}
	
	
	
	//CATEGORY
	IF (obj.CategoryID'="") || (obj.CategoryName'="")
	{
	
	set doc.resource.category={}
	set doc.resource.category.coding=[]
	set codingCategory={}
	set codingCategory.system="https://aicentre.co.uk/flip/DocMan"
	if obj.CategoryID'="" set codingCategory.code=obj.CategoryID
	if obj.CategoryName'="" set codingCategory.display=obj.CategoryName
	do doc.resource.category.coding.%Push(codingCategory)

	}

	
	set doc.resource.subject={}
	set doc.resource.subject.reference="Patient/"_obj.Patient.nhs
	
	
	set doc.resource.date=##class(Ens.Util.Time).ConvertDateTime(obj.documentdate,"%Y%m%d%H%M","%Y-%m-%dT%H:%M:%S")_".000Z"
	
	

	
	set doc.resource.content=[]
	set content={}
	set content.attachment={}
	

	set b64=$system.Encryption.Base64Encode(obj.TextBlock,1)
	
	set content.attachment.data=b64
	
	
	
	do doc.resource.content.%Push(content)
	

	do bundle.entry.%Push(doc)
	
	set strmc=##class(Ens.StreamContainer).%New()
	set strm=##class(%Stream.GblChrCompress).%New()
	set jsonFormatter=##class(%JSON.Formatter).%New()
	set json= bundle.%ToJSON()
	do jsonFormatter.FormatToStream(json,.strm)
	
	set strmc.Stream=strm
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Process.HL7Generator">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66274,38244.4211646</TimeChanged>
<TimeCreated>66268,43639.576867</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK
	
	Do ..CreateHL7(pRequest,.enrichedHL7)
		
	set hl7String=enrichedHL7.OutputToString()
		
	
		
	set req=##class(Ens.StringContainer).%New()
	set qry="INSERT INTO tflip.hl7_adt(hl7) VALUES ('"_hl7String_"')"
	set req.StringValue=qry
	
	$$$LOGINFO(qry)
		

		set t=..SendRequestSync("ExecuteUpdate", req)
		quit t
]]></Implementation>
</Method>

<Method name="CreateHL7">
<ClassMethod>1</ClassMethod>
<FormalSpec>pInput:Ens.Request,*enrichedHL7:EnsLib.HL7.Message</FormalSpec>
<Implementation><![CDATA[
	set t=$$$OK
	
	set hl7=##class(EnsLib.HL7.Message).%New()
	set hl7.DocType="2.4:ADT_A05"
	
	
	//msh
	set msh=##class(EnsLib.HL7.Segment).%New()
	set t=msh.SetValueAt("MSH","0")
	set t=msh.SetValueAt("^~\&","2")
	set t=msh.SetValueAt("PAS","3")
	set t=msh.SetValueAt("PAS","4")
	set t=msh.SetValueAt("FLIP","5")
	set t=msh.SetValueAt("FLIP","6")
	
	set dateTime=$ZDT($H,8,5)
	set dateTime=$E(dateTime,0,8)_$E(dateTime,10,11)_$E(dateTime,13,14)_$E(dateTime,16,17)
	set t=msh.SetValueAt(dateTime,"7")
	
	set t=msh.SetValueAt("ADT^A28","9")
	
	set guid=$System.Util.CreateGUID()
	
	set t=msh.SetValueAt(guid,"10.1")
	
	set t=msh.SetValueAt("2.4","12.1")
	
	set t=hl7.SetSegmentAt(msh,"1")
	
	//evn
	set evn=##class(EnsLib.HL7.Segment).%New()
	set t=evn.SetValueAt("EVN","0")
	set t=evn.SetValueAt(dateTime,"2.1")
	set t=evn.SetValueAt(dateTime,"6.1")
	set t=hl7.AppendSegment(evn)
	
	//pid
	set pid=##class(EnsLib.HL7.Segment).%New()
	set t=pid.SetValueAt("PID","0")
	
	set lastMRN=""
	set lastNHS=""
		
	set lastNHS=##class(Ens.Util.FunctionSet).Lookup("FLIP.Configuration","lastNHS")
	set lastMRN=##class(Ens.Util.FunctionSet).Lookup("FLIP.Configuration","lastMRN")	
	
		
	set nhs=lastNHS+1
	set mrn=lastMRN+1
	do ##class(Ens.Util.LookupTable).%UpdateValue("FLIP.Configuration","lastMRN",mrn)
	do ##class(Ens.Util.LookupTable).%UpdateValue("FLIP.Configuration","lastNHS",nhs)
	
	//get prefix
	set prefix=##class(Ens.Util.FunctionSet).Lookup("FLIP.Configuration","mrnPrefix")
	
	
	set t=pid.SetValueAt(prefix_mrn_"^^^CMMRN^MRN","3(1)")
	set t=pid.SetValueAt(nhs_"^^^NHS^NHS^NHS","3(2)")
	
	set x=$RANDOM(2)
	set x=$CASE(x,0:1,1:2)	
	set lastName=$ZCONVERT(##class(%PopulateUtils).LastName(),"U")
	
	set firstName=$ZCONVERT(##class(%PopulateUtils).FirstName(x),"U")
	
	set t=pid.SetValueAt(lastName_"^"_firstName,"5")

	
		
	set date=##class(%PopulateUtils).CDate(3,30000,55000)
	set date=$REPLACE(date,"-","")
	
	set t=pid.SetValueAt(date,"7.1")
	
	$$$LOGINFO(x)
	
	set sex=$CASE(x,1:"M",2:"F")
	
	set t=pid.SetValueAt(sex,"8")
	
	//post code
	set outcode=##class(%PopulateUtils).StringMin(2,2)_##class(%PopulateUtils).Integer(1,40)
	set inCode=$RANDOM(10)_##class(%PopulateUtils).StringMin(2,2)
	set postCode=$ZCONVERT(outcode_" "_inCode,"U")
	
	set t=pid.SetValueAt(postCode,"11(1).5")
		
	//ethnic category
	
	$$$LOGINFO("HERE")
		
	set x=$RANDOM(9)
	set ethnicCategory=$CASE(x,0:"A",1:"B",2:"C",3:"D",4:"E",5:"F",6:"G",7:"H",7:"J",8:"Z")
	
	set t=pid.SetValueAt(ethnicCategory,"22(1).1")
	set t=pid.SetValueAt("N","30")
	
	set t=hl7.AppendSegment(pid)
	
	set enrichedHL7=hl7
	
	$$$LOGINFO("HERE")
	
	
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="FLIP.Service.Scheduler">
<Super>Ens.BusinessService</Super>
<TimeChanged>66274,52865.8827964</TimeChanged>
<TimeCreated>66267,61050.5259771</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	
	set run=##class(Ens.Util.FunctionSet).Lookup("FLIP.Configuration","patient_historic_run")
	if run="stop" quit t
	
	set t=..SendRequestSync("BulkInsertProcess","",.resp)
	
	q t
]]></Implementation>
</Method>
</Class>


<Class name="FLIP.Tables.BodyPart">
<Super>%Persistent</Super>
<TimeChanged>66403,51254.9768001</TimeChanged>
<TimeCreated>66403,50876.6299814</TimeCreated>

<Property name="CodeValue">
<Type>%String</Type>
</Property>

<Property name="CodeMeaning">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Tables.BodyPartD</DataLocation>
<DefaultData>BodyPartDefaultData</DefaultData>
<IdLocation>^FLIP.Tables.BodyPartD</IdLocation>
<IndexLocation>^FLIP.Tables.BodyPartI</IndexLocation>
<StreamLocation>^FLIP.Tables.BodyPartS</StreamLocation>
<ExtentSize>0</ExtentSize>
<Data name="BodyPartDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CodeValue</Value>
</Value>
<Value name="3">
<Value>CodeMeaning</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Tables.ImageSeries">
<Super>%Persistent</Super>
<TimeChanged>66414,52507.7801881</TimeChanged>
<TimeCreated>66408,44170.1848329</TimeCreated>

<Property name="SeriesGUID">
<Type>%String</Type>
</Property>

<Property name="AccessionID">
<Type>%String</Type>
</Property>

<Property name="Modality">
<Type>%String</Type>
</Property>

<Property name="BodyPart">
<Type>%String</Type>
</Property>

<Index name="seriesIndex">
<Properties>SeriesGUID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Tables.ImageSeriesD</DataLocation>
<DefaultData>ImageSeriesDefaultData</DefaultData>
<IdLocation>^FLIP.Tables.ImageSeriesD</IdLocation>
<IndexLocation>^FLIP.Tables.ImageSeriesI</IndexLocation>
<StreamLocation>^FLIP.Tables.ImageSeriesS</StreamLocation>
<ExtentSize>0</ExtentSize>
<Data name="ImageSeriesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SeriesGUID</Value>
</Value>
<Value name="3">
<Value>AccessionID</Value>
</Value>
<Value name="4">
<Value>Modality</Value>
</Value>
<Value name="5">
<Value>BodyPart</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Tables.Laterality">
<Super>%Persistent</Super>
<TimeChanged>66414,52078.9002564</TimeChanged>
<TimeCreated>66414,51431.1405475</TimeCreated>

<Property name="CodeValue">
<Type>%String</Type>
</Property>

<Property name="CodeMeaning">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Tables.LateralityD</DataLocation>
<DefaultData>LateralityDefaultData</DefaultData>
<IdLocation>^FLIP.Tables.LateralityD</IdLocation>
<IndexLocation>^FLIP.Tables.LateralityI</IndexLocation>
<StreamLocation>^FLIP.Tables.LateralityS</StreamLocation>
<ExtentSize>0</ExtentSize>
<Data name="LateralityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CodeValue</Value>
</Value>
<Value name="3">
<Value>CodeMeaning</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="FLIP.Tables.Modality">
<Super>%Persistent</Super>
<TimeChanged>66403,56145.4308518</TimeChanged>
<TimeCreated>66403,54789.1558255</TimeCreated>

<Property name="CodeValue">
<Type>%String</Type>
</Property>

<Property name="CodeMeaning">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Tables.ModalityD</DataLocation>
<DefaultData>ModalityDefaultData</DefaultData>
<IdLocation>^FLIP.Tables.ModalityD</IdLocation>
<IndexLocation>^FLIP.Tables.ModalityI</IndexLocation>
<StreamLocation>^FLIP.Tables.ModalityS</StreamLocation>
<ExtentSize>49</ExtentSize>
<Data name="ModalityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CodeValue</Value>
</Value>
<Value name="3">
<Value>CodeMeaning</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","4","8","12","16","19","22","25","28","31","34","37","40","43","46","49"),$lb(0,0,0,1,1,0,1,1,0,1,1,0,1,1,1),$lb(822083584,822083584,872415232,872415232,939524096,939524096,825360384,838860800,905969664,905969664,956301312,825819136,842137600,838860800,889192448,889192448,939524096,842530816,858849280,822083584,872415232,872415232,922746880,859242496,875560960,805306368,855638016,855638016,905969664,905969664,956301312,876150784))</Histogram>
</Property>
<Property name="CodeMeaning">
<Selectivity>2.0408%</Selectivity>
<AverageFieldSize>21.47</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" AUTOREFRACTION"," CARDIAC ELECTROPHYSIOLOGY"," DIAPHANOGRAPHY"," ELECTROMYOGRAPHY"," GENERAL MICROSCOPY"," INTRAVASCULAR OPTICAL COHERENCE TOMOGRAPHY"," LASER SCAN"," MAMMOGRAPHY"," OPHTHALMIC MAPPING"," OPHTHALMIC TOMOGRAPHY B-SCAN VOLUME ANALYSIS"," OPTICAL COHERENCE TOMOGRAPHY"," POSITION SENSOR"," RADIOGRAPHIC IMAGING"," SLIDE MICROSCOPY"," ULTRASOUND"," X-RAY ANGIOGRAPHY"),$lb(1,1,1,1,1,1,1,1,12,3,1,1,1,1,1),$lb(541152596,1096111183,1128354372,1128354372,1145651536,1145651536,1162626371,1162626371,1195724357,1195724357,1229870162,1229870162,1279349573,1279349573,1296125261,1296125261,1330661460,1296126032,1414483279,1213483073,1414087489,1330664521,1347375945,1347375945,1380009033,1380009033,1397508420,1397508420,1431065682,1431065682,1479365185,542649682))</Histogram>
</Property>
<Property name="CodeValue">
<Selectivity>2.0408%</Selectivity>
<AverageFieldSize>4.8</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" AR"," BMD"," DMS"," EMG"," GM"," IVOCT"," LEN"," MR"," OCT"," OPT"," OPV"," PT"," RF"," SM"," US"," XC"),$lb(1,1,1,1,1,1,1,1,2,3,1,1,1,1,1),$lb(541151744,1095892992,1112359936,1112359936,1145918208,1145918208,1162692352,1162692352,1196228608,1196228608,1230393155,1230393155,1279610368,1279610368,1297219584,1297219584,1329812480,1129578496,1347682304,1409286144,1442840576,1330664960,1347682304,1347682304,1380319232,1380319232,1397555200,1397555200,1431502848,1431502848,1480785920,542655232))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="FLIP.Tables.SopClass">
<Super>%Persistent</Super>
<TimeChanged>66415,33231.0432427</TimeChanged>
<TimeCreated>66415,33028.3056794</TimeCreated>

<Property name="CodeValue">
<Type>%String</Type>
</Property>

<Property name="CodeMeaning">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^FLIP.Tables.SopClassD</DataLocation>
<DefaultData>SopClassDefaultData</DefaultData>
<IdLocation>^FLIP.Tables.SopClassD</IdLocation>
<IndexLocation>^FLIP.Tables.SopClassI</IndexLocation>
<StreamLocation>^FLIP.Tables.SopClassS</StreamLocation>
<ExtentSize>98</ExtentSize>
<Data name="SopClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CodeValue</Value>
</Value>
<Value name="3">
<Value>CodeMeaning</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","7","14","21","28","35","42","49","56","62","68","74","80","86","92","98"),$lb(0,0,0,1,0,0,1,0,0,1,0,0,1,0,1),$lb(822083584,822083584,922746880,922746880,825491456,825491456,842072064,822083584,939524096,842530816,859111424,859111424,875692032,838860800,956301312,876150784,892731392,892731392,909246464,838860800,939524096,909639680,926154752,926154752,942669824,805306368,905969664,943063040,959578112,838860800,939524096,959971328))</Histogram>
</Property>
<Property name="CodeMeaning">
<Selectivity>1.0204%</Selectivity>
<AverageFieldSize>32.26</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 12-LEAD ECG WAVEFORM STORAGE"," BASIC VOICE AUDIO WAVEFORM STORAGE"," COMPREHENSIVE 3D SR"," DIGITAL X-RAY IMAGE STORAGE - FOR PROCESSING"," ENHANCED SR"," GRAYSCALE SOFTCOPY PRESENTATION STATE STORAGE"," KEY OBJECT SELECTION"," MR IMAGE STORAGE"," OPHTHALMIC TOMOGRAPHY IMAGE STORAGE"," RESPIRATORY WAVEFORM STORAGE"," RT ION BEAMS TREATMENT RECORD STORAGE"," SEGMENTATION STORAGE"," SURFACE SCAN MESH STORAGE"," VIDEO MICROSCOPIC IMAGE STORAGE"," VL SLIDE-COORDINATES MICROSCOPIC IMAGE STORAGE"," X-RAY RADIOFLUOROSCOPIC IMAGE STORAGE"),$lb(1,1,1,1,1,1,1,1,1,2,1,2,1,2,1),$lb(540095021,825371980,1111577417,1111577417,1129270608,1129270608,1145653065,1145653065,1162758209,1162758209,1196573017,1196573017,1262836000,1262836000,1297227849,1297227849,1330661460,1330661460,1380275024,1163087945,1411402063,1381245001,1397049165,1162300741,1431455297,1398100550,1447642181,1229210959,1277186892,1447829587,1479365185,542649682))</Histogram>
</Property>
<Property name="CodeValue">
<Selectivity>1.0204%</Selectivity>
<AverageFieldSize>30.35</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 1.2.840.10008.5.1.4.1.1.1"," 1.2.840.10008.5.1.4.1.1.11.2"," 1.2.840.10008.5.1.4.1.1.128"," 1.2.840.10008.5.1.4.1.1.2"," 1.2.840.10008.5.1.4.1.1.4.2"," 1.2.840.10008.5.1.4.1.1.481.5"," 1.2.840.10008.5.1.4.1.1.66"," 1.2.840.10008.5.1.4.1.1.68.1"," 1.2.840.10008.5.1.4.1.1.77.1.3"," 1.2.840.10008.5.1.4.1.1.77.1.5.4"," 1.2.840.10008.5.1.4.1.1.78.5"," 1.2.840.10008.5.1.4.1.1.82.1"," 1.2.840.10008.5.1.4.1.1.88.50"," 1.2.840.10008.5.1.4.1.1.9.1.1"," 1.2.840.10008.5.1.4.1.1.9.4.2"," 1.2.840.10008.5.1.4.45.1"),$lb(26,26,25,25,26,25,26,25,30,26,25,26,25,27,21),$lb(540094002,0,825111040,825111040,842530816,825374720,838860800,838860800,875442688,775028736,942747189,876097838,909508608,905969664,942551296,909651505,926363185,855638016,892220416,925774126,942552320,926428725,942812721,841888000,942552368,943205941,959328558,825110784,875442688,825110830,875900465,540094002))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>




<Class name="FLIPPKG.FoundationProduction">
<ProcedureBlock>0</ProcedureBlock>
<Super>Ens.Production</Super>
<TimeChanged>66443,55236.7689363</TimeChanged>
<TimeCreated>66240,34331.7753092</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="FLIPPKG.FoundationProduction" TestingEnabled="true" LogGeneralTraceEvents="true">
  <Description></Description>
  <ActorPoolSize>1</ActorPoolSize>
  <Item Name="FHIRProcessor" Category="" ClassName="FLIP.Process.FHIRConvertor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="ExecuteQuery" Category="" ClassName="FLIP.Operation.ExecuteQuery" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="ArchiveIO">1</Setting>
    <Setting Target="Adapter" Name="DSN">PG</Setting>
  </Item>
  <Item Name="Img_ProcessHistoricData" Category="" ClassName="FLIP.Imaging.Process.HistoricDataIngestion" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Doc_ProcessMDM" Category="" ClassName="FLIP.Documents.Process.MDMProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Img_InvokeHistoricIngestion" Category="" ClassName="FLIP.Imaging.Service.InvokeHistoricIngestion" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="CallInterval">594949449</Setting>
    <Setting Target="Adapter" Name="DSN">PG</Setting>
    <Setting Target="Adapter" Name="Query">select MAX(imgres_rowid) as max_rowid,Count(*) numbRec_toProcess from tflip.imaging_results
WHERE rec_process='0' AND pat_nhstracest='01'
AND NOT (pat_nhs='' OR ires_accessionid='' OR ires_procedurecode='' OR ires_procedurename='' OR ires_modality='' OR ires_dateofstudy='')</Setting>
    <Setting Target="Adapter" Name="KeyFieldName"></Setting>
  </Item>
  <Item Name="Doc_InvokeHistoricIngestion" Category="" ClassName="FLIP.Documents.Service.InvokeHistoricIngestion" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="CallInterval">10000</Setting>
    <Setting Target="Adapter" Name="DSN">PG</Setting>
    <Setting Target="Adapter" Name="KeyFieldName"></Setting>
    <Setting Target="Adapter" Name="Query">select MAX(usdoc_rowid) as max_rowid,Count(*) numbRec_toProcess from tflip.usdoc_metadata
WHERE rec_process=false
AND NOT (pat_dob='' OR pat_nhs='' OR usdoc_documentdate='' OR usdoc_uniqueid='' OR usdoc_contentref='')</Setting>
  </Item>
  <Item Name="Doc_ProcessHistoricData" Category="" ClassName="FLIP.Documents.Process.HistoricDataIngestion" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="Img_ProcessORU" Category="" ClassName="FLIP.Imaging.Process.RealtimeDataIngestion" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="HTTP_SendToFlip" Category="" ClassName="FLIP.Operation.SendToFLIP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
    <Setting Target="Host" Name="FLIPAuthorisation">AUTHKEY</Setting>
  </Item>
  <Item Name="Test_HL7In" Category="" ClassName="EnsLib.HL7.Service.HTTPService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="MessageSchemaCategory">2.4FLIP</Setting>
    <Setting Target="Host" Name="TargetConfigNames">Img_ProcessORU</Setting>
    <Setting Target="Adapter" Name="CallInterval">500</Setting>
  </Item>
  <Item Name="Test_MDMIn" Category="" ClassName="EnsLib.HL7.Service.HTTPService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="TargetConfigNames">Doc_ProcessMDM</Setting>
    <Setting Target="Adapter" Name="Port">9985</Setting>
    <Setting Target="Host" Name="MessageSchemaCategory">2.4</Setting>
  </Item>
</Production>
]]></Data>
</XData>
</Class>


</Export>
